Most of functions are very short, so I put them in header.

const Point Map::PickARandomPointInGroundOrPath(UniformIntRandom& ran) const;
  This function will return a totally valid random point in map. Valid means
  that it's ground or path.

struct Point;
  It contaions two intergents, one means x and another means y. We use it to
  represent a point in on a plane.

strcut Rect;
  Almost same as Point struct, but two intergents means width and height.

struct RectWithPos;
  Combination of Point and Rect, save a rect and its position.

inline bool operator<(const Point & a, const Point & b);
  Comparation between two points, totally meaningless in physics. However we
  need it for better search.

class Map;
  Most important part in this file! It describe a gaming map for role to
  explore.

  enum BlockType;
    Some constant value to describe the type of each blocks in map.
  
  enum BuildingType;
    We need some buildings for other thing such as travelling around the world!

  struct Target;
    It record a position in another map.

  inline Map(const int32_t& w, const int32_t& h) : width_(w), height_(h);
    Create a map. We can create different map in size by changing w or h.

  inline const int32_t id();
    Return id of this map. If it doesn't have id, create one.

  inline const BlockType& block(const Point& pos) const;
  inline void set_block(const Point& pos, const BlockType& block);
  inline const BuildingType& building(const Point& pos) const;
  inline void set_building(const Point& pos, const BuildingType& building);
    Set or read informations about map.

  inline const Target& portal_target(const Point& pos) const;
  inline void set_portal_target(const Point& pos, const Target& target);
    When there is a portal, we can get or set its "Target" by these functions.

  inline void FillWithBlock(const BlockType& block);
  inline void FillWithBuilding(const BuildingType& building);
    Fill entire map.

